package io.codelex.flightplanner.maintree.repositories;import io.codelex.flightplanner.domain.Airport;import io.codelex.flightplanner.domain.Flight;import io.codelex.flightplanner.dto.AddFlightRequest;import io.codelex.flightplanner.dto.FlightSearch;import io.codelex.flightplanner.dto.PageResults;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Repository;import org.springframework.web.server.ResponseStatusException;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Repository@ConditionalOnProperty(prefix = "flight-planner", name = "connection", havingValue = "inmemory")public class FlightInMemoryRepository implements FlightRepository {    private final List<Flight> flightList = new ArrayList<>();    private int id = 1;    @Override    public synchronized Flight addFlight(AddFlightRequest input) {        Flight addedFlight = new Flight(input);        if (flightList.stream().anyMatch(flight -> flight.equals(addedFlight))) {            throw new ResponseStatusException(HttpStatus.CONFLICT);        }        if ((input.getFrom().equals(input.getTo())) ||                (addedFlight.getArrivalTime().isBefore(addedFlight.getDepartureTime())) ||                (addedFlight.getArrivalTime().equals(addedFlight.getDepartureTime()))) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST);        }        addedFlight.setId(id);        flightList.add(addedFlight);        id++;        return addedFlight;    }    @Override    public synchronized void removeFlight(int id) {        flightList.removeIf(flight -> flight.getId() == id);    }    public List<Airport> searchAirports(String input) {        List<Airport> foundAirports = new ArrayList<>();        String inputConverted = input.toLowerCase().trim();        for (Flight flight : flightList) {            String fromCountry = flight.getFrom().getCountry().toLowerCase();            String fromCity = flight.getFrom().getCity().toLowerCase();            String fromAirport = flight.getFrom().getAirport().toLowerCase();            String toCountry = flight.getTo().getCountry().toLowerCase();            String toCity = flight.getTo().getCity().toLowerCase();            String toAirport = flight.getTo().getAirport().toLowerCase();            if ((fromCountry.startsWith(inputConverted)) || (fromCity.startsWith(inputConverted)) ||                    (fromAirport.startsWith(inputConverted)) || (toCountry.startsWith(inputConverted)) ||                    (toCity.startsWith(inputConverted)) || (toAirport.startsWith(inputConverted))) {                foundAirports.add(flight.getFrom());            }        }        return foundAirports;    }    @Override    public PageResults<Flight> searchFlights(FlightSearch input) {        List<Flight> resultsList = new ArrayList<>() {        };        if (input.getFrom().equals(input.getTo())) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST);        }        for (Flight flight : flightList) {            String searchFrom = input.getFrom().trim().toLowerCase();            String searchTo = input.getTo().trim().toLowerCase();            LocalDate searchDate = input.searchDateInFormat();            String fromAirport = flight.getFrom().getAirport().toLowerCase();            String toAirport = flight.getTo().getAirport().toLowerCase();            LocalDate departureDate = flight.getDepartureTime().toLocalDate();            if (searchFrom.equals(fromAirport) && searchTo.equals(toAirport) && searchDate.equals(departureDate)) {                resultsList.add(flight);            }        }        return new PageResults<>(0, resultsList.size(), resultsList);    }    @Override    public Flight getFlight(int input) {        return flightList.stream()                .filter(flight -> flight.getId() == input)                .findFirst()                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Flight not found"));    }    @Override    public void clearFlights() {        flightList.clear();    }}