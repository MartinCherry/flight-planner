package io.codelex.flightplanner.maintree.services;import io.codelex.flightplanner.domain.Airport;import io.codelex.flightplanner.domain.Flight;import io.codelex.flightplanner.dto.AddFlightRequest;import io.codelex.flightplanner.dto.FlightSearch;import io.codelex.flightplanner.dto.PageResults;import io.codelex.flightplanner.maintree.repositories.FlightRepository;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.stereotype.Service;import java.util.List;@Service@ConditionalOnProperty(prefix = "flight-planner", name = "connection", havingValue = "inmemory")public class FlightServiceInMemory implements FlightService {    FlightRepository repository;    public FlightServiceInMemory(FlightRepository repository) {        this.repository = repository;    }    public synchronized Flight addFlight(AddFlightRequest input) {        return this.repository.addFlight(input);    }    public synchronized Flight getFlight(int input) {        return this.repository.getFlight(input);    }    public synchronized void removeFlight(int id) {        this.repository.removeFlight(id);    }    public List<Airport> searchAirports(String input) {        return repository.searchAirports(input);    }    public PageResults<Flight> searchFlights(FlightSearch input) {        return repository.searchFlights(input);    }    public synchronized void clearFlight() {        this.repository.clearFlights();    }    @Override    public void clearAirports() {    }}